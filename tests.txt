
# more_data:    Test using more data.
From 100 to 10000


#1 -> "max_samples": 100
#2 -> "max_samples": 200
#3 -> "max_samples": 500
#4 -> "max_samples": 1000
#5 -> "max_samples": 2000
#6 -> "max_samples": 5000
#7 -> "max_samples": 10000


#generalization_max_1000
"max_samples": 1000

#1 -> train_test on m_3_r_2
#2 -> train on m_3_r_2 test on m_4_r_2
#3 -> train on m_3_r_2 test on m_4_r_3
#4 -> train on m_3_r_2 test on m_4_r_2 and m_4_r_3


#generalization -> same as above
"max_samples": 1000000


#normalize



#encoding

run 6-7 hanno le relazioni senza un nome specifico

run 3 era h2 (con nomi delle relazioni specifiche)






    
        #New tests
        #V1: connessioni cicliche tra i nodi (stesso tipo di connessione)
        #V2: connessioni acicliche tra i nodi. Rimetto manualmente b e x ad ogni convoluzione
        #V3: connessioni acicliche tra i nodi. Metto i self loops
        
        
        #V1 is the best one
        
        
        # We need to use a convolutional layer to obtain the node embeddings (for the inhomogeneous case)
        # https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.RGCNConv.html#torch_geometric.nn.conv.RGCNConv
        # https://pytorch-geometric.readthedocs.io/en/latest/get_started/introduction.html
        # https://pytorch-geometric.readthedocs.io/en/latest/cheatsheet/gnn_cheatsheet.html#heterogeneous-graph-neural-network-operators 
        # https://pytorch-geometric.readthedocs.io/en/latest/tutorial/heterogeneous.html